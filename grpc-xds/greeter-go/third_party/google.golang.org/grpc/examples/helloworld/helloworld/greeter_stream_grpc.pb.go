// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: helloworld/greeter_stream.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingGreeter_SayHello_FullMethodName = "/helloworld.StreamingGreeter/SayHello"
)

// StreamingGreeterClient is the client API for StreamingGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingGreeterClient interface {
	// Streams greetings
	SayHello(ctx context.Context, opts ...grpc.CallOption) (StreamingGreeter_SayHelloClient, error)
}

type streamingGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingGreeterClient(cc grpc.ClientConnInterface) StreamingGreeterClient {
	return &streamingGreeterClient{cc}
}

func (c *streamingGreeterClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (StreamingGreeter_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingGreeter_ServiceDesc.Streams[0], StreamingGreeter_SayHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingGreeterSayHelloClient{stream}
	return x, nil
}

type StreamingGreeter_SayHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type streamingGreeterSayHelloClient struct {
	grpc.ClientStream
}

func (x *streamingGreeterSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingGreeterSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingGreeterServer is the server API for StreamingGreeter service.
// All implementations must embed UnimplementedStreamingGreeterServer
// for forward compatibility
type StreamingGreeterServer interface {
	// Streams greetings
	SayHello(StreamingGreeter_SayHelloServer) error
	mustEmbedUnimplementedStreamingGreeterServer()
}

// UnimplementedStreamingGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingGreeterServer struct {
}

func (UnimplementedStreamingGreeterServer) SayHello(StreamingGreeter_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedStreamingGreeterServer) mustEmbedUnimplementedStreamingGreeterServer() {}

// UnsafeStreamingGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingGreeterServer will
// result in compilation errors.
type UnsafeStreamingGreeterServer interface {
	mustEmbedUnimplementedStreamingGreeterServer()
}

func RegisterStreamingGreeterServer(s grpc.ServiceRegistrar, srv StreamingGreeterServer) {
	s.RegisterService(&StreamingGreeter_ServiceDesc, srv)
}

func _StreamingGreeter_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingGreeterServer).SayHello(&streamingGreeterSayHelloServer{stream})
}

type StreamingGreeter_SayHelloServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type streamingGreeterSayHelloServer struct {
	grpc.ServerStream
}

func (x *streamingGreeterSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingGreeterSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingGreeter_ServiceDesc is the grpc.ServiceDesc for StreamingGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.StreamingGreeter",
	HandlerType: (*StreamingGreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _StreamingGreeter_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/greeter_stream.proto",
}
